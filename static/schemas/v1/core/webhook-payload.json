{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "/schemas/v1/core/webhook-payload.json",
  "title": "Webhook Payload",
  "description": "Payload structure sent to webhook endpoints when async task status changes. Protocol-level fields are at the top level and the task-specific payload is nested under the 'result' field. This schema represents what your webhook handler will receive when a task transitions from 'submitted' to a terminal or intermediate state.",
  "type": "object",
  "properties": {
    "operation_id": {
      "type": "string",
      "description": "Publisher-defined operation identifier correlating a sequence of task updates across webhooks."
    },
    "task_id": {
      "type": "string",
      "description": "Unique identifier for this task. Use this to correlate webhook notifications with the original task submission."
    },
    "task_type": {
      "$ref": "/schemas/v1/enums/task-type.json",
      "description": "Type of AdCP operation that triggered this webhook. Enables webhook handlers to route to appropriate processing logic."
    },
    "domain": {
      "type": "string",
      "description": "AdCP domain this task belongs to. Helps classify the operation type at a high level.",
      "enum": ["media-buy", "signals"]
    },
    "status": {
      "$ref": "/schemas/v1/enums/task-status.json",
      "description": "Current task status. Webhooks are only triggered for status changes after initial submission (e.g., submitted → input-required, submitted → completed, submitted → failed)."
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 timestamp when this webhook was generated."
    },
    "message": {
      "type": "string",
      "description": "Human-readable summary of the current task state. Provides context about what happened and what action may be needed."
    },
    "context_id": {
      "type": "string",
      "description": "Session/conversation identifier. Use this to continue the conversation if input-required status needs clarification or additional parameters."
    },
    "progress": {
      "type": "object",
      "description": "Progress information for tasks still in 'working' state. Rarely seen in webhooks since 'working' tasks typically complete synchronously, but may appear if a task transitions from 'submitted' to 'working'.",
      "properties": {
        "percentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Completion percentage (0-100)"
        },
        "current_step": {
          "type": "string",
          "description": "Current step or phase of the operation"
        },
        "total_steps": {
          "type": "integer",
          "minimum": 1,
          "description": "Total number of steps in the operation"
        },
        "step_number": {
          "type": "integer",
          "minimum": 1,
          "description": "Current step number"
        }
      },
      "additionalProperties": false
    },
    "result": {
      "type": ["object", "array", "string", "number", "boolean", "null"],
      "description": "Task-specific payload for this status update. For 'completed', contains the final result. For 'input-required', may contain approval or clarification context. Optional for non-terminal updates.",
      "additionalProperties": true
    },
    "error": {
      "type": ["string", "null"],
      "description": "Error message for failed tasks. Only present when status is 'failed'."
    }
  },
  "required": ["task_id", "task_type", "domain", "status", "created_at", "updated_at"],
  "additionalProperties": true,
  "notes": [
    "Webhooks are ONLY triggered when the initial response status is 'submitted' (long-running operations)",
    "Webhook payloads include protocol-level fields (operation_id, task_type, status, optional task_id/context_id/timestamp/message) and the task-specific payload nested under 'result'",
    "The task-specific response data is NOT merged at the top level; it is contained entirely within the 'result' field",
    "For example, a create_media_buy webhook will include operation_id, task_type, status, and result.buyer_ref, result.media_buy_id, result.packages, etc.",
    "Your webhook handler receives the complete information needed to process the result without making additional API calls"
  ],
  "examples": [
    {
      "description": "Webhook for input-required status (human approval needed)",
      "data": {
        "operation_id": "op_456",
        "task_id": "task_456",
        "task_type": "create_media_buy",
        "domain": "media-buy",
        "status": "input-required",
        "timestamp": "2025-01-22T10:15:00Z",
        "context_id": "ctx_abc123",
        "message": "Campaign budget $150K requires VP approval to proceed",
        "result": {
          "buyer_ref": "nike_q1_campaign_2024"
        }
      }
    },
    {
      "description": "Webhook for completed create_media_buy",
      "data": {
        "operation_id": "op_456",
        "task_id": "task_456",
        "task_type": "create_media_buy",
        "domain": "media-buy",
        "status": "completed",
        "timestamp": "2025-01-22T10:30:00Z",
        "message": "Media buy created successfully with 2 packages ready for creative assignment",
        "result": {
          "media_buy_id": "mb_12345",
          "buyer_ref": "nike_q1_campaign_2024",
          "creative_deadline": "2024-01-30T23:59:59Z",
          "packages": [
            {
              "package_id": "pkg_12345_001",
              "buyer_ref": "nike_ctv_package"
            }
          ]
        }
      }
    },
    {
      "description": "Webhook for failed sync_creatives",
      "data": {
        "operation_id": "op_789",
        "task_id": "task_789",
        "task_type": "sync_creatives",
        "domain": "media-buy",
        "status": "failed",
        "timestamp": "2025-01-22T10:46:00Z",
        "message": "Creative sync failed due to invalid asset URLs",
        "error": "invalid_assets: One or more creative assets could not be accessed"
      }
    }
  ]
}
